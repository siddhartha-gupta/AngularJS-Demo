/// <reference path='../_all.ts' />
var formApp;
(function (formApp) {
    'use strict';
    var usersListController = (function () {
        function usersListController($scope, $location, $log, apiService) {
            this.$scope = $scope;
            this.$location = $location;
            this.$log = $log;
            this.apiService = apiService;
            this.$log.log('constructor called test');
        }
        usersListController.prototype.getUsers = function () {
            var _this = this;
            this.$log.log('getUsers');
            this.apiService.getCall({
                'url': 'http://localhost:8080/getuserslist'
            })
                .success(function (data, status) { return _this.processServerData(data); })
                .error(function (data, status) { return _this.$log.log('err'); });
        };
        usersListController.prototype.processServerData = function (data) {
            this.$log.log('processServerData: ', data);
            if (data && Object.keys(data).length > 0) {
                this.$log.log('adding server data');
                this.usersList = data;
            }
            else {
                this.usersList = {};
            }
        };
        usersListController.$inject = [
            '$scope',
            '$location',
            '$log',
            'apiService'
        ];
        return usersListController;
    })();
    formApp.usersListController = usersListController;
})(formApp || (formApp = {}));


/// <reference path='../_all.ts' />
var formApp;
(function (formApp) {
    'use strict';
    var APIService = (function () {
        function APIService($http) {
            this.$http = $http;
            this.httpService = $http;
        }
        APIService.prototype.getCall = function (params) {
            var config = params.config || {};
            return this.httpService.get(params.url, params);
        };
        APIService.prototype.postCall = function (params) {
            return this.httpService.post(params.url, params.data);
        };
        APIService.$inject = ['$http'];
        return APIService;
    })();
    formApp.APIService = APIService;
})(formApp || (formApp = {}));


/// <reference path='../bower_components/DefinitelyTyped/jquery/jquery.d.ts' />
/// <reference path='../bower_components/DefinitelyTyped/angularjs/angular.d.ts' />
/// <reference path="../bower_components/DefinitelyTyped/angularjs/angular-route.d.ts" />
/// <reference path='app.ts' />
/// <reference path='controllers/usersList.controller.ts' />
/// <reference path='services/api.service.ts' />


/// <reference path='_all.ts' />
var formApp;
(function (formApp) {
    var Config = (function () {
        function Config($routeProvider) {
            $routeProvider.when("/userslist", {
                templateUrl: 'templates/usersList.html',
                controller: 'usersListCtrl',
                resolve: {
                    serverData: function (apiService) {
                        return apiService.getCall({
                            'url': 'http://localhost:8080/getuserslist'
                        });
                    }
                }
            })
                .otherwise({ redirectTo: '/userslist' });
        }
        return Config;
    })();
    formApp.Config = Config;
    Config.$inject = ['$routeProvider'];
    formApp.app = angular.module("formApp", ['ngRoute']);
    formApp.app.config(Config);
    formApp.app.controller('usersListCtrl', formApp.usersListController);
    formApp.app.service('apiService', formApp.APIService);
})(formApp || (formApp = {}));



//# sourceMappingURL=data:application/json;base64,
